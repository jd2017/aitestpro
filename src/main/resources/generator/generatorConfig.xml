<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">


<!-- 配置生成器 -->
<generatorConfiguration>

    <!--执行generator插件生成文件的命令： call mvn mybatis-generator:generate -e -->
    <!-- 引入配置文件 -->
    <properties resource="generator/config.properties"/>
    <!--classPathEntry:数据库的JDBC驱动,换成你自己的驱动位置 可选 -->
    <!--    <classPathEntry location="${jdbc.jar.path}"/>-->

    <!-- 一个数据库一个context 配置对象环境-->
    <!--    id="MysqlTable" ：此上下文的唯一标识符。此值将用于一些错误消息。
    targetRuntime="MyBatis3Simple"：为了避免生成Example相关的代码和方法。如果需要则改为Mybatis3
    defaultModelType="flat" ：每个表只生成一个实体类    -->
    <context id="MysqlTable" targetRuntime="MyBatis3Simple" defaultModelType="flat">

        <!-- 配置起始与结束标识符 指明数据库的用于标记数据库对象名的符号-->
        <!-- ORACLE就是双引号，MYSQL默认是`反引号  数据库使用mysql,所以前后的分隔符都设为”`”-->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>


        <!--用来定义一个插件，用于扩展或者修改MBG生成的代码，不常用，可以配置0个或者多个，个数不受限制。
        只有一个Type标签，其中填插件的全限定名。
        常用的有缓存插件，序列化插件，RowBounds插件，ToString插件等。-->
        <plugin type="${mapper.plugin}">
            <property name="mappers" value="${mapper.Mapper}"/>
        </plugin>



        <!--数据库连接配置-->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <!-- 配置生成的实体类位置 type使用XMLMAPPER，会使接口和XML完全分离。
            targetPackage：放置生成的类的包。 MyBatis Generator 将根据需要为生成的包创建文件夹
            targetProject：包所在的project下的位置，指定了将保存对象的项目和源文件夹。该目录不存在，MyBatis Generator 将不会创建该目录        -->
    <javaModelGenerator targetPackage="${java.targetPackage}" targetProject="${java.targetProject}">
        <!-- 设置一个根对象，
        如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
        注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：1，属性名相同，类型相同，有相同的getter/setter方法；
        rootClass：所有实体类的父类，如果父类定义了一些字段以及对应的getter、setter方法，那么实体类中就不会再生成。必须要类的安全限定名，如com.momo.test.BasePo         -->
        <property name="rootClass"
                  value="${java.rootClass}"/>
    </javaModelGenerator>


        <!-- sqlMapGenerator：配置SQL映射生成器（Mapper.xml文件）的属性，可选且最多配置1个  配置映射位置
                只有两个必选属性(和实体类的差不多)：
                targetPackage：生成映射文件存放的包名，可能会受到其他配置的影响。
                 targetProject：指定目标targetPackage的项目路径，可以用相对路径或者绝对路径        -->
        <sqlMapGenerator targetPackage="${mapper.targetPackage}" targetProject="${mapper.targetProject}"/>

        <!-- 配置接口位置
            typetype="XMLMAPPER"：接口和XML完全分离；所有方法都在XML中，接口用依赖Xml文件
            targetPackage：生成Mapper文件存放的包名，可能会受到其他配置的影响。
            targetProject：指定目标targetPackage的项目路径，可以用相对路径
             -->
        <javaClientGenerator targetPackage="${java.targetMapperPackage}" targetProject="${java.targetProject}"
                             type="XMLMAPPER"/>



        <!-- 生成用户的相关类 -->
        <table schema="${table.schema}" tableName="${table.name}" domainObjectName="${table.domain}" enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" enableUpdateByExample="false" >
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>
    </context>
</generatorConfiguration>